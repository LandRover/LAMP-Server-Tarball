# SpamBlockerTechnology 4.5.49 (July 23, 2024)

## Paths
ETCDIR = /opt/local/etc/exim
CONFDIR = ETCDIR/configs
VIRTUALDIR = ETCDIR/virtual


#primary_hostname =
smtp_active_hostname = ${if exists{VIRTUALDIR/helo_data}{${lookup{$interface_address}iplsearch{VIRTUALDIR/helo_data}{$value}{$primary_hostname}}}{$primary_hostname}}


## ClamAV
# av_scanner = clamd:/var/run/clamav/clamd
#.include_if_exists CONFDIR/clamav.load.conf

# Block Cracking variables
.include_if_exists CONFDIR/blockcracking/variables.conf

# Easy Spam Figher variables
.include_if_exists CONFDIR/easy_spam_fighter/variables.conf

# SRS
.include_if_exists CONFDIR/srs.conf

# qualify_domain =

perl_startup = do '/opt/local/etc/exim/bin/exim.pl'

system_filter = CONFDIR/system_filter.exim

untrusted_set_sender = *

local_from_check = false

RBL_DNS_LIST=\
       b.barracudacentral.org : \
       zen.spamhaus.org!&0.255.0.0

.include CONFDIR/variables.conf
.include CONFDIR/strings.conf
.include_if_exists CONFDIR/strings.conf.custom

helo_allow_chars = _

log_selector = \
  +delivery_size \
  +sender_on_delivery \
  +received_recipients \
  +received_sender \
  +smtp_confirmation \
  +subject \
  +smtp_incomplete_transaction \
  -dnslist_defer \
  -host_lookup_failed \
  -queue_run \
  -rejected_header \
  -retry_defer \
  -skip_delivery \
  +arguments

syslog_duplication = false

## ACLs
acl_not_smtp = acl_script
acl_smtp_auth = acl_check_auth
acl_smtp_connect = acl_connect
acl_smtp_helo = acl_check_helo
acl_smtp_mail = ${if ={$interface_port}{587} {accept} {${if ={$interface_port}{10025} {acl_smtp_mail_proxy}{acl_check_mail}}}}
acl_smtp_mailauth = smtp_mailauth
acl_smtp_rcpt = acl_check_recipient
acl_smtp_dkim = ${if ={$interface_port}{587} {accept}{acl_check_dkim}}
acl_smtp_data = acl_check_message
acl_smtp_mime = acl_check_mime


## Lists
addresslist whitelist_senders = nwildlsearch;VIRTUALDIR/whitelist_senders
addresslist blacklist_senders = nwildlsearch;VIRTUALDIR/blacklist_senders
domainlist blacklist_domains = nwildlsearch;VIRTUALDIR/blacklist_domains
domainlist whitelist_domains = nwildlsearch;VIRTUALDIR/whitelist_domains
domainlist local_domains = lsearch;VIRTUALDIR/domains_local
domainlist relay_domains = lsearch;VIRTUALDIR/domains_local
domainlist use_rbl_domains = lsearch;VIRTUALDIR/use_rbl_domains
domainlist skip_rbl_domains = nwildlsearch;VIRTUALDIR/skip_rbl_domains
hostlist skip_rbl_hosts = ${if exists{VIRTUALDIR/skip_rbl_hosts}{wildlsearch;VIRTUALDIR/skip_rbl_hosts}}
hostlist skip_rbl_hosts_ip = ${if exists{VIRTUALDIR/skip_rbl_hosts_ip}{VIRTUALDIR/skip_rbl_hosts_ip}}
hostlist auth_relay_hosts = *
hostlist bad_sender_hosts = nwildlsearch;VIRTUALDIR/bad_sender_hosts
hostlist bad_sender_hosts_ip = VIRTUALDIR/bad_sender_hosts_ip
hostlist whitelist_hosts = nwildlsearch;VIRTUALDIR/whitelist_hosts
hostlist whitelist_hosts_ip = VIRTUALDIR/whitelist_hosts_ip
hostlist proxy_hosts_ip = ${if exists{VIRTUALDIR/proxy_hosts_ip}{VIRTUALDIR/proxy_hosts_ip}}
BLACKLIST_USERNAMES = VIRTUALDIR/blacklist_usernames
BLACKLIST_SMTP_USERNAMES = VIRTUALDIR/blacklist_smtp_usernames
BLACKLIST_SCRIPT_USERNAMES = VIRTUALDIR/blacklist_script_usernames

never_users = root

host_lookup = *

rfc1413_hosts = *
rfc1413_query_timeout = 0s

tls_advertise_hosts = *

.include_if_exists CONFDIR/variables.conf.post

## ACLs
begin acl

acl_connect:
  warn set acl_c_spam_assassin_has_run = 0
  warn set acl_m_is_whitelisted = 0
  warn set acl_c_accept_recipient_if_whitelisted = 1
  .include_if_exists CONFDIR/easy_spam_fighter/connect.conf
  accept hosts = *


acl_check_mail:
  ## custom drop rules
  deny    condition     = ${if eq{$sender_helo_name}{}}
          message       = HELO required before MAIL

  drop    message       = Helo name contains a ip address (HELO was $sender_helo_name) and not is valid
          condition     = ${if match{$sender_helo_name}{\N((\d{1,3}[.-]\d{1,3}[.-]\d{1,3}[.-]\d{1,3})|([0-9a-f]{8})|([0-9A-F]{8}))\N}{yes}{no}}
          condition     = ${if match {${lookup dnsdb{>: defer_never,ptr=$sender_host_address}}\}{$sender_helo_name}{no}{yes}}
          delay         = 45s

  drop    condition     = ${if isip{$sender_helo_name}}
          message       = Access denied - Invalid HELO name (See RFC2821 4.1.3)

  drop    condition     = ${if eq{[$interface_address]}{$sender_helo_name}}
          message       = $interface_address is _my_ address

  accept  condition = ${if eq{$acl_m_is_whitelisted}{1}{1}{0}}

  accept  sender_domains = +whitelist_domains
          logwrite = $sender_host_address whitelisted in local domains whitelist
          set acl_m_is_whitelisted = 1

  accept  hosts = +whitelist_hosts
          logwrite = $sender_host_address whitelisted in local hosts whitelist
          set acl_m_is_whitelisted = 1

  accept  hosts = +whitelist_hosts_ip
          logwrite = $sender_host_address whitelisted in local hosts IP whitelist
          set acl_m_is_whitelisted = 1

  # accept if envelope sender is in whitelist
  accept  senders = +whitelist_senders
          logwrite = $sender_host_address whitelisted in local sender whitelist
          set acl_m_is_whitelisted = 1

  .include_if_exists CONFDIR/easy_spam_fighter/check_mail.conf

  accept


smtp_mailauth:
  accept hosts      = <; 127.0.0.1 ; ::1
         condition  = ${if eq{$interface_port}{10025}}
         log_message= Will accept MAIL AUTH parameter for $authenticated_sender
 deny


acl_smtp_mail_proxy:
 deny   condition= ${if eq{$interface_port}{10025}}
        condition= ${if eq{$authenticated_sender}{}}
        message  = All connections on port $interface_port need MAIL AUTH sender


acl_check_auth:
  drop  set acl_m_authcount = ${eval10:0$acl_m_authcount+1}
        condition = ${if >{$acl_m_authcount}{2}}
        delay     = 10s
        message   = ONLY_ONE_AUTH_PER_CONN

  accept


acl_check_helo:

  .include_if_exists CONFDIR/acl_check_helo.pre.conf

  # accept mail originating on this server unconditionally
  accept  hosts = <;; @[]; 127.0.0.0/8 ; ::1 ; @
  # deny if the HELO pretends to be this host
    deny message = HELO_HOST_IMPERSANATION
      condition = ${if or { \
                            {eq{$sender_helo_name}{$smtp_active_hostname}} \
                            {eq{$sender_helo_name}{[$interface_address]}} \
                          } {true}{false} }

  # deny if the HELO is an IP address
    deny message = HELO_IS_IP
         condition   = ${if eq{$interface_port}{25}}
         condition   = ${if isip{$sender_helo_name}}

  # deny if hostname if ylmf-pc, which accounts for a HUGE percentage of BF attacks
    deny message = HELO_BLOCKED_FOR_ABUSE
         condition   = ${if eq{$sender_helo_name}{ylmf-pc}}

  # deny if the HELO pretends to be one of the domains hosted on the server
    deny message = HELO_IS_LOCAL_DOMAIN
        condition = ${if match_domain{$sender_helo_name}{+local_domains}{true}{false}}
        hosts = ! +relay_hosts

  .include_if_exists CONFDIR/acl_check_helo.post.conf

  accept


acl_script:

  .include_if_exists CONFDIR/acl_script.pre.conf

  discard set acl_m_uid = ${perl{find_uid}}
          set acl_m_username = ${perl{get_username}{$acl_m_uid}}
          condition = ${if !eq {$acl_m_uid}{-1}{yes}{no}}
          condition = ${if >{${perl{hit_limit_user}{$acl_m_username}}}{1}}
          message = USER_TOO_MANY

  discard condition = ${if !eq{$originator_uid}{$exim_uid}}
          condition = ${if exists{BLACKLIST_USERNAMES}}
          condition = ${lookup{$acl_m_username}lsearch{BLACKLIST_USERNAMES}{1}{0}}
          message = USER_ON_BLACKLIST_SCRIPT BLACKLIST_USERNAMES

  discard condition = ${if !eq{$originator_uid}{$exim_uid}}
          condition = ${if exists{BLACKLIST_SCRIPT_USERNAMES}}
          condition = ${lookup{$acl_m_username}lsearch{BLACKLIST_SCRIPT_USERNAMES}{1}{0}}
          message = USER_ON_BLACKLIST_SCRIPT BLACKLIST_SCRIPT_USERNAMES

  .include_if_exists CONFDIR/blockcracking/script.conf

  accept

  .include_if_exists CONFDIR/blockcracking/script.recipients.conf


acl_check_recipient:

  .include_if_exists CONFDIR/acl_check_recipient.pre.conf

  # block certain well-known exploits, Deny for local domains if
  # local parts begin with a dot or contain @ % ! / |
  deny  domains       = +local_domains
        message = Invalid characters in local_part
        local_parts   = ^[.] : ^.*[@%!|]

  # If you've hit the limit, you can't send anymore. Requires exim.pl 17+
  drop  message = AUTH_TOO_MANY
        condition = ${perl{auth_hit_limit_acl}}
        authenticated = *

  drop  message = MULTIPLE_BOUNCE_RECIPIENTS
        senders = : postmaster@*
        condition = ${if >{$recipients_count}{0}{true}{false}}

  drop  message = TOO_MANY_FAILED_RECIPIENTS
        log_message = REJECTED - Too many failed recipients - count = $rcpt_fail_count
        condition = ${if > {${eval:$rcpt_fail_count}}{3}{yes}{no}}
        !verify = recipient/callout=2m,defer_ok,use_sender

  defer  message = DOMAIN_SUSPENDED
        domains = +local_domains
        condition = ${if exists{VIRTUALDIR/${domain}_off}{yes}{no}}

  drop  authenticated = *
        condition = ${if exists{BLACKLIST_USERNAMES}}
        set acl_m_uid = ${perl{find_uid_auth_id}{$authenticated_id}}
        set acl_m_username = ${perl{get_username}{$acl_m_uid}}
        condition = ${if !eq {$acl_m_uid}{-1}{yes}{no}}
        condition = ${lookup{$acl_m_username}lsearch{BLACKLIST_USERNAMES}{1}{0}}
        message = USER_ON_BLACKLIST_SMTP
        logwrite = User account $acl_m_username is blocked via BLACKLIST_USERNAMES

  drop  authenticated = *
        condition = ${if exists{BLACKLIST_SMTP_USERNAMES}}
        condition = ${lookup{$authenticated_id}lsearch{BLACKLIST_SMTP_USERNAMES}{1}{0}}
        message = USER_ON_BLACKLIST_SMTP
        logwrite = E-Mail account $authenticated_id is blocked via BLACKLIST_SMTP_USERNAMES

  drop  authenticated = *
        condition = ${if exists{BLACKLIST_SMTP_USERNAMES}}
        set acl_m_uid = ${perl{find_uid_auth_id}{$authenticated_id}}
        set acl_m_username = ${perl{get_username}{$acl_m_uid}}
        condition = ${if !eq {$acl_m_uid}{-1}{yes}{no}}
        condition = ${lookup{$acl_m_username}lsearch{BLACKLIST_SMTP_USERNAMES}{1}{0}}
        message = USER_ON_BLACKLIST_SMTP
        logwrite = User account $acl_m_username is blocked via BLACKLIST_SMTP_USERNAMES

  .include_if_exists CONFDIR/easy_spam_fighter/check_rcpt.mid.conf

  # Deny if the recipient doesn't exist
  deny  message = NO_SUCH_RECIPIENT
        domains = +local_domains
        !verify = recipient

  accept  condition = ${if eq{$acl_m_is_whitelisted}{1}{1}{0}}
          condition = ${if eq{$acl_c_accept_recipient_if_whitelisted}{1}}

  .include_if_exists CONFDIR/acl_check_recipient.mid.conf

  #Block Cracking - https://github.com/Exim/exim/wiki/BlockCracking
  .include_if_exists CONFDIR/blockcracking/auth.conf

  # restrict port 587 to authenticated users only
  # see also daemon_smtp_ports above
  accept  hosts = +auth_relay_hosts
          condition = ${if eq {$interface_port}{587} {yes}{no}}
          endpass
          message = RELAY_NOT_PERMITTED_AUTH
          authenticated = *

  # Deny all Mailer-Daemon messages not for us:
  deny    message = We didn't send the message
          senders = :
          domains = !+relay_domains
                    !authenticated = *

  # Remaining Mailer-Daemon messages must be for us
  accept senders = :
           domains = +relay_domains

  # 1st deny checks if it's a hostname or IPV4 address with dots or IPV6 address
  deny message = R1: HELO_SHOULD_BE_FQDN
         !authenticated = *
         condition   = ${if match{$sender_helo_name}{\N^\[\N}{no}{yes}}
         condition   = ${if match{$sender_helo_name}{\N\.\N}{no}{yes}}

  ## 2nd deny makes sure the hostname doesn't end with a dot (invalid)
  # deny message = R2: HELO_SHOULD_BE_FQDN
  #       !authenticated = *
  #       condition   = ${if match{$sender_helo_name}{\N\.$\N}}

  # 3rd deny makes sure the hostname has no double-dots (invalid)
  deny message = R3: HELO_SHOULD_BE_FQDN
         !authenticated = *
         condition   = ${if match{$sender_helo_name}{\N\.\.\N}}

  ## 4th deny make sure the hostname doesn't end in .home (invalid domain)
  # deny message = R4: HELO_SHOULD_BE_FQDN
  #       !authenticated = *
  #       condition  = ${if match{$sender_helo_name}{\N\.home$\N}}

  # warn domains = +skip_av_domains
  # set acl_m0 = $tod_epoch

  deny  domains       = !+local_domains
        local_parts   = ^[./|] : ^.*[@%!] : ^.*/\\.\\./

  accept  hosts = :
          logwrite = Whitelisted as having local origination

  deny message = 554 denied. 5.7.1 BLOCKED_DUE_TO_SPAM_SENDER
    domains = +use_rbl_domains
    domains = !+skip_rbl_domains
    hosts = !+skip_rbl_hosts : !+skip_rbl_hosts_ip
    senders = +blacklist_senders

  deny message = 554 denied. 5.7.1 BLOCKED_DUE_TO_SPAM_HOST
       # only for domains that do want to be tested against RBLs
       domains = +use_rbl_domains
       domains = !+skip_rbl_domains
       hosts = !+skip_rbl_hosts : !+skip_rbl_hosts_ip
       hosts = +bad_sender_hosts

  deny message = 554 denied. 5.7.1 BLOCKED_DUE_TO_SPAM_IP
       hosts = +bad_sender_hosts_ip

  accept domains = +local_domains
         sender_domains = !+blacklist_domains
         hosts = !+bad_sender_hosts
         hosts = !+bad_sender_hosts_ip
         dnslists = list.dnswl.org&0.0.0.2
         dnslists = list.dnswl.org!=127.0.0.255
         logwrite = $sender_host_address whitelisted in list.dnswl.org

  # accept domains = +local_domains
  #        dnslists = hostkarma.junkemailfilter.com=127.0.0.1
  #        logwrite = $sender_host_address whitelisted in hostkarma.junkemailfilter.com

  # accept  local_parts = whitelist
  #         domains     = example.com

  require verify = sender

  deny message = 554 denied. 5.7.1 BLOCKED_DUE_TO_SPAM_DOMAIN
       domains = +use_rbl_domains
       domains = !+skip_rbl_domains
       hosts = !+skip_rbl_hosts : !+skip_rbl_hosts_ip
       sender_domains = +blacklist_domains

#  deny message = 554 denied. 5.7.1 Forged Paypal Mail, not sent from PayPal.
#       senders = *@paypal.com
#       condition = ${if match {$sender_host_name}{\Npaypal.com$\N}{no}{yes}}

  warn hosts = +skip_rbl_hosts
       logwrite = $sender_host_address RBL whitelisted in skip_rbl_hosts
  warn hosts = +skip_rbl_hosts_ip
       logwrite = $sender_host_address RBL whitelisted in skip_rbl_hosts_ip
  warn domains = +skip_rbl_domains
       logwrite = $sender_host_address RBL whitelisted $domain in skip_rbl_domains

  deny message = RBL_BLOCKED_BY_LIST
       hosts   = !+relay_hosts
       domains = +use_rbl_domains
       domains = !+skip_rbl_domains
       hosts   = !+skip_rbl_hosts : !+skip_rbl_hosts_ip
       !authenticated = *
       dnslists = ${readfile {CONFDIR/dnsbl.conf}{:}}

  .include_if_exists CONFDIR/easy_spam_fighter/check_rcpt.conf

  .include_if_exists CONFDIR/greylist.conf

# ACCEPT EMAIL BEGINNING HERE
  # accept if address is in a local domain as long as recipient can be verified
  accept  domains = +local_domains
          endpass
          message = UNKNOWN_USER
          verify = recipient

  # accept if address is in a domain for which we relay as long as recipient
  # can be verified
  accept  domains = +relay_domains
          endpass
          verify = recipient

  accept  hosts = +relay_hosts
          add_header = X-Relay-Host: $sender_host_address

  accept  hosts = +auth_relay_hosts
          endpass
          message = AUTH_REQUIRED
          authenticated = *

  .include_if_exists CONFDIR/acl_check_recipient.post.conf

# FINAL DENY EMAIL BEFORE DATA BEGINS HERE
  # default at end of acl causes a "deny", but line below will give
  # an explicit error message:
  deny    message = RELAY_NOT_PERMITTED


acl_check_dkim:
  accept  condition = ${if eq{$acl_m_is_whitelisted}{1}{1}{0}}

  .include_if_exists CONFDIR/easy_spam_fighter/check_dkim.conf

  accept


acl_check_message:

  warn set acl_c_spam_assassin_has_run = 0

  .include_if_exists CONFDIR/acl_check_message.pre.conf

  warn    condition       = ${if !def:h_Message-ID: {yes}{no}}
          message         = Adding Message-ID header because it is missing!
          add_header      = Message-ID: <GENERATED-WASMISSING-$message_exim_id@$primary_hostname>

  accept  condition       = ${if eq{$acl_m_is_whitelisted}{1}{1}{0}}

  .include_if_exists CONFDIR/easy_spam_fighter/check_message.conf
  .include_if_exists CONFDIR/clamav.conf
  .include_if_exists CONFDIR/acl_check_message.post.conf

  accept

######################################
# ACL that is used for each MIME attachment in the email.
acl_check_mime:

  .include_if_exists CONFDIR/check_mime.conf.custom
  .include_if_exists CONFDIR/easy_spam_fighter/check_mime.conf

  accept


begin authenticators

plain:
    driver = plaintext
    public_name = PLAIN
    server_prompts = :
    server_condition = "${perl{smtpauth}{0}}"
    server_set_id = $2
    server_advertise_condition = ${if def:tls_in_cipher }


login:
    driver = plaintext
    public_name = LOGIN
    server_prompts = "Username:: : Password::"
    server_condition = "${perl{smtpauth}{0}}"
    server_set_id = $1
    server_advertise_condition = ${if def:tls_in_cipher }


.include_if_exists CONFDIR/authenticators.post.conf


begin routers


.include_if_exists CONFDIR/routers.pre.conf


lookuphost:
  driver = dnslookup
  domains = ! +local_domains
  ignore_target_hosts = 127.0.0.0/8
  condition = "${perl{check_limits}}"
  transport = remote_smtp
  no_more


.include_if_exists CONFDIR/spamassassin.conf


majordomo_aliases:
  driver = redirect
  allow_defer
  allow_fail
  data = ${if exists{VIRTUALDIR/domains/${domain}/majordomo/list.aliases}{${lookup{$local_part}lsearch{VIRTUALDIR/domains/${domain}/majordomo/list.aliases}}}}
  domains = lsearch;VIRTUALDIR/domain_owners
  file_transport = address_file
  group = daemon
  pipe_transport = majordomo_pipe
  retry_use_local_part
  no_rewrite
  user = majordomo


majordomo_private:
  driver = redirect
  allow_defer
  allow_fail
  #condition = "${if eq {$received_protocol} {local} {true} {false} }"
  condition = "${if or { {eq {$received_protocol} {local}} \
                         {eq {$received_protocol} {spam-scanned}} } {true} {false} }"
  data = ${if exists{VIRTUALDIR/domains/${domain}/majordomo/private.aliases}{${lookup{$local_part}lsearch{VIRTUALDIR/domains/${domain}/majordomo/private.aliases}}}}
  domains = lsearch;VIRTUALDIR/domain_owners
  file_transport = address_file
  group = daemon
  pipe_transport = majordomo_pipe
  retry_use_local_part
  user = majordomo

domain_filter:
  driver = redirect
  allow_filter
  no_check_local_user
  condition = "${if exists{VIRTUALDIR/domains/${domain}/filter}{yes}{no}}"
  user = "${lookup{$domain}lsearch{VIRTUALDIR/domain_owners}{$value}}"
  group = "mail"
  file = VIRTUALDIR/domains/${domain}/filter
  directory_transport = address_file
  pipe_transport = virtual_address_pipe
  retry_use_local_part
  no_verify


uservacation:
  # uservacation reply to all except errors, bounces, lists
  driver = accept
  condition = ${if def:h_Auto-submitted:{${if match{$h_Auto-submitted:}{\N^no\N\}{yes}{no}}}{yes}}
  condition = ${lookup{$local_part} lsearch {VIRTUALDIR/domains/${domain}/vacation.conf}{yes}{no}}
  condition = ${if match{$h_X-Spam-Status:}{\N^Yes\N}{no}{yes}}
  require_files = VIRTUALDIR/domains/${domain}/reply/${local_part}.msg
  # do not reply to errors and bounces or lists
  senders = " ! ^.*-request@.*:\
              ! ^owner-.*@.*:\
              ! ^postmaster@.*:\
              ! ^listmaster@.*:\
              ! ^mailer-daemon@.*\
              ! ^root@.*"
  transport = uservacation
  unseen


#autoreply exists
#both passwd and forwarders do not have local_part.
userautoreply:
  driver = accept
  condition = ${if def:h_Auto-submitted:{${if match{$h_Auto-submitted:}{\N^no\N\}{yes}{no}}}{yes}}
  condition = ${lookup{$local_part} lsearch {VIRTUALDIR/domains/${domain}/autoresponder.conf}{yes}{no}}
  condition = ${if match{$h_X-Spam-Status:}{\N^Yes\N}{no}{yes}}
  require_files = VIRTUALDIR/domains/${domain}/reply/${local_part}.msg

  condition = ${if exists{VIRTUALDIR/domains/${domain}/passwd}}
  condition = ${if exists{VIRTUALDIR/domains/${domain}/aliases}}
  condition = ${lookup{$local_part}lsearch{VIRTUALDIR/domains/${domain}/passwd}{no}{yes}}
  condition = ${lookup{$local_part}lsearch{VIRTUALDIR/domains/${domain}/aliases}{no}{yes}}

  # do not reply to errors and bounces or lists
  senders = " ! ^.*-request@.*:\
              ! ^owner-.*@.*:\
              ! ^postmaster@.*:\
              ! ^listmaster@.*:\
              ! ^mailer-daemon@.*\
              ! ^root@.*"
  transport = userautoreply


#autoreply exists
#either passwd or forwarders exist, failover from above.
userautoreply_unseen:
  driver = accept
  condition = ${if def:h_Auto-submitted:{${if match{$h_Auto-submitted:}{\N^no\N\}{yes}{no}}}{yes}}
  condition = ${lookup{$local_part} lsearch {VIRTUALDIR/domains/${domain}/autoresponder.conf}{yes}{no}}
  condition = ${if match{$h_X-Spam-Status:}{\N^Yes\N}{no}{yes}}
  require_files = VIRTUALDIR/domains/${domain}/reply/${local_part}.msg
  # do not reply to errors and bounces or lists
  senders = " ! ^.*-request@.*:\
              ! ^owner-.*@.*:\
              ! ^postmaster@.*:\
              ! ^listmaster@.*:\
              ! ^mailer-daemon@.*\
              ! ^root@.*"
  transport = userautoreply
  unseen

#any callbacks doing sender verify checks to this server accept SRS0 encoded emails if they exist, else the verify will fail.
#until we figure out how to extract the original forwarder name in exim, we'll accept and drop all SRS0 encoded emails.
#the srs_recipient is the original remote sender, so we dont want to forwarder there, else it will generated untraced backscatter (no data=srs_recipient)
#I had found srs_orig_recipient variable, but wasn't able to use it to check for local fordwarders.
#so any email to SRS0=..@localdomain.com will be accepted and dropped into the :blackhole:, which should be sufficient to satisfy the sender verify, and prevent any spam since it's always dropped.
#if the final recipient hits "reply", it should already go to the orignal remote sender, not to the SRS name.
inbound_srs:
    driver =    redirect
    senders =   :
    domains =   +local_domains
    # detect inbound bounces which are SRS'd, and decode them
    condition = ${if inbound_srs {$local_part} {SRS_SECRET}}
    data =      $srs_recipient

inbound_srs_failure:
    driver =    redirect
    senders =   :
    domains =   +local_domains
    # detect inbound bounces which look SRS'd but are invalid
    condition = ${if inbound_srs {$local_part} {}}
    allow_fail
    data =      :fail: Invalid SRS recipient address



#forwarder exists
#user exists
virtual_user_unseen:
  driver = accept
  condition = ${if exists{VIRTUALDIR/domains/${domain}/passwd}{1}{0}}
  condition = ${lookup{$local_part}lsearch{VIRTUALDIR/domains/${domain}/aliases}{1}{0}}
  condition = ${lookup{$local_part}lsearch{VIRTUALDIR/domains/${domain}/aliases}{${if eq{$value}{$local_part}{0}{1}}}{0}}
  condition = ${perl{save_virtual_user}}
  domains = lsearch;VIRTUALDIR/domain_owners
  group = mail
  .include_if_exists CONFDIR/local_part_suffix.conf
  retry_use_local_part
  transport = dovecot_lmtp_udp
  unseen

# forwarder exists - user does not exist
virtual_aliases_nouser_nostar:
  driver = redirect
  allow_defer
  allow_fail
  condition = ${if exists{VIRTUALDIR/domains/${domain}/passwd}{1}{0}}
  condition = ${lookup{$local_part}lsearch{VIRTUALDIR/domains/${domain}/aliases}{1}{0}}
  condition = ${lookup{$local_part}lsearch{VIRTUALDIR/domains/${domain}/passwd}{0}{1}}
  data = ${lookup{$local_part}lsearch{VIRTUALDIR/domains/$domain/aliases}}
  file_transport = address_file
  group = mail
  pipe_transport = virtual_address_pipe
  retry_use_local_part
  .include_if_exists CONFDIR/local_part_suffix.conf

# forwarder does not exist - user exists
virtual_user:
  driver = accept
  condition = ${if exists{VIRTUALDIR/domains/${domain}/passwd}{1}{0}}
  condition = ${lookup{$local_part}lsearch{VIRTUALDIR/domains/${domain}/aliases}{0}{1}}
  condition = ${perl{save_virtual_user}}
  domains = lsearch;VIRTUALDIR/domain_owners
  group = mail
  retry_use_local_part
  transport = dovecot_lmtp_udp
  .include_if_exists CONFDIR/local_part_suffix.conf

# wildcard forwarder - user should have already been caught above
virtual_aliases:
  #only the wildcard will be used here
  driver = redirect
  allow_defer
  allow_fail
  data = ${if exists{VIRTUALDIR/domains/$domain/aliases}{${lookup{$local_part}lsearch*{VIRTUALDIR/domains/$domain/aliases}}}}
  file_transport = address_file
  group = mail
  pipe_transport = virtual_address_pipe
  retry_use_local_part
  .include_if_exists CONFDIR/local_part_suffix.conf


drop_solo_alias:
  driver = redirect
  allow_defer
  allow_fail
  data = ${if exists{VIRTUALDIR/domains/$domain/aliases}{${lookup{$local_part}lsearch{VIRTUALDIR/domains/$domain/aliases}}}}
  file_transport = devnull
  group = mail
  pipe_transport = devnull
  retry_use_local_part
  #include_domain = true
  .include_if_exists CONFDIR/local_part_suffix.conf

userforward:
  driver = redirect
  allow_filter
  check_ancestor
  check_local_user
  no_expn
  file = $home/.forward
  file_transport = address_file
  pipe_transport = address_pipe
  reply_transport = address_reply
  directory_transport = address_directory
  no_verify


system_aliases:
  driver = redirect
  allow_defer
  allow_fail
  data = ${lookup{$local_part}lsearch{ETCDIR/aliases}}
  file_transport = address_file
  pipe_transport = address_pipe
  retry_use_local_part
  # user = mail


localuser:
  driver = accept
  check_local_user
  condition = "${if eq {$domain} {$primary_hostname} {yes} {no}}"
  transport = local_delivery


begin transports


.include_if_exists CONFDIR/transports.pre.conf


spamcheck:
  driver = pipe
  batch_max = 100
  command = /opt/local/sbin/exim/bin/exim -oMr spam-scanned -bS
  current_directory = "/tmp"
  group = mail
  home_directory = "/tmp"
  log_output
  message_prefix = 
  message_suffix = 
  return_fail_output
  no_return_path_add
  transport_filter = /usr/bin/spamc -u ${lookup{$domain}lsearch*{VIRTUALDIR/domain_owners}{$value}}
  use_bsmtp
  user = mail


majordomo_pipe:
  driver = pipe
  group = daemon
  return_fail_output
  user = majordomo


local_delivery:
  driver = appendfile
  delivery_date_add
  envelope_to_add
  directory = "${extract{5}{:}{${lookup{$local_part}lsearch{/etc/passwd}{$value}}}}/Maildir/"
  directory_mode = 770
  create_directory = true
  maildir_format
  group = mail
  mode = 0660
  return_path_add
  user = ${local_part}


virtual_localdelivery:
  driver = appendfile
  create_directory
  delivery_date_add
  directory_mode = 770
  envelope_to_add
  directory = "${extract{5}{:}{${lookup{${lookup{$domain}lsearch*{VIRTUALDIR/domain_owners}{$value}}}lsearch{/etc/passwd}{$value}}}}/imap/${domain}/${local_part}/Maildir"
  maildir_format
  group = mail
  mode = 660
  return_path_add
  user = "${lookup{$domain}lsearch*{VIRTUALDIR/domain_owners}{$value}}"
  quota = ${if exists{VIRTUALDIR/domains/${domain}/quota}{${lookup{$local_part}lsearch*{VIRTUALDIR/domains/${domain}/quota}{$value}{0}}}{0}}
  .include_if_exists CONFDIR/virtual_localdelivery.conf.post


uservacation:
  driver = autoreply
  file = VIRTUALDIR/domains/${domain}/reply/${local_part}.msg
  from = "${local_part}@${domain}"
  log = VIRTUALDIR/domains/${domain}/reply/${local_part}.log
  no_return_message
  headers = ${if exists{VIRTUALDIR/domains/${domain}/reply/${local_part}.headers}{${readfile{VIRTUALDIR/domains/${domain}/reply/${local_part}.headers}}}}
  subject = ${if def:h_Subject: {\
                ${if exists{VIRTUALDIR/domains/${domain}/reply/${local_part}.subject}\
                    {${readfile{VIRTUALDIR/domains/${domain}/reply/${local_part}.subject}{}}}\
                    {Autoreply}\
                }: ${quote:${escape:${length_60:$h_Subject:}}}}\
                {I am on vacation}}
  to = "${reply_address}"
  user = mail
  once = VIRTUALDIR/domains/${domain}/reply/${local_part}.once
  once_file_size = 100K
  once_repeat = ${if exists{VIRTUALDIR/domains/${domain}/reply/${local_part}.once_time}{${readfile{VIRTUALDIR/domains/${domain}/reply/${local_part}.once_time}{}}}{2d}}


userautoreply:
  driver = autoreply
  bcc = ${lookup{${local_part}} lsearch {VIRTUALDIR/domains/${domain}/autoresponder.conf}{$value}}
  file = VIRTUALDIR/domains/${domain}/reply/${local_part}.msg
  from = "${local_part}@${domain}"
  log = VIRTUALDIR/domains/${domain}/reply/${local_part}.log
  no_return_message
  headers = ${if exists{VIRTUALDIR/domains/${domain}/reply/${local_part}.headers}{${readfile{VIRTUALDIR/domains/${domain}/reply/${local_part}.headers}}}}
  subject = ${if def:h_Subject: {\
                ${if exists{VIRTUALDIR/domains/${domain}/reply/${local_part}.subject}\
                    {${readfile{VIRTUALDIR/domains/${domain}/reply/${local_part}.subject}{}}}\
                    {Autoreply}\
                }: ${quote:${escape:${length_60:$h_Subject:}}}}\
                {Autoreply Message}}
  to = "${reply_address}"
  user = mail
  once = VIRTUALDIR/domains/${domain}/reply/${local_part}.once
  once_file_size = 100K
  once_repeat = ${if exists{VIRTUALDIR/domains/${domain}/reply/${local_part}.once_time}{${readfile{VIRTUALDIR/domains/${domain}/reply/${local_part}.once_time}{}}}{2d}}


devnull:
  driver = appendfile
  file = /dev/null


remote_smtp:
  driver = smtp
  headers_add = "${if def:authenticated_id{X-Authenticated-Id: ${authenticated_id}}}"
  return_path = bounce@${lc:${domain:$h_from:}}
  interface = <; ${if exists{VIRTUALDIR/domain_ips}{${lookup{$sender_address_domain}lsearch*{VIRTUALDIR/domain_ips}}}}
  helo_data = ${if exists{VIRTUALDIR/helo_data}{${lookup{$sending_ip_address}iplsearch{VIRTUALDIR/helo_data}{$value}{$primary_hostname}}}{$primary_hostname}}
  hosts_try_chunking =
  hosts_try_fastopen =


.include_if_exists CONFDIR/dkim.conf


address_pipe:
  driver = pipe
  return_output


virtual_address_pipe:
  driver = pipe
  group = nobody
  return_output
  user = "${lookup{$domain}lsearch* {VIRTUALDIR/domain_owners}{$value}}"
.include_if_exists CONFDIR/cagefs.pipe.conf


address_file:
  driver = appendfile
  delivery_date_add
  envelope_to_add
  return_path_add


address_reply:
  driver = autoreply


dovecot_lmtp_udp:
  driver = lmtp
  socket = /var/run/dovecot/lmtp
  #maximum number of deliveries per batch, default 1
  batch_max = 200
  delivery_date_add
  envelope_to_add
  return_path_add
  user = mail


address_directory:
  driver = appendfile
  maildir_format
  maildir_use_size_file
  delivery_date_add
  envelope_to_add
  return_path_add


## Retry

# Domain               Error       Retries
# ------               -----       -------
begin retry
*                      quota
*                      *           F,2h,15m; G,16h,1h,1.5; F,4d,8h
